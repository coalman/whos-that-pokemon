import type { NextPage, GetStaticProps } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import { PokemonClient } from "pokenode-ts";

/**
 * NOTE: all images in the official-artwork directory are 475 x 475.
 *
 * Verified with the following bash code:
 *
 * ```bash
 * $ cd sprites/pokemon/other/official-artwork
 * $ for f in ./*.png; do file "$f" | awk -F, '{print $2}'; done | uniq
 * ```
 */
const imgSrcSize = { width: 475, height: 475 } as const;

const Home: NextPage<{
  pokemonList: readonly string[];
}> = (props) => {
  const [reveal, setReveal] = useState(false);

  const [pokemonIndex, setPokemonIndex] = useState(0);

  const imgSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${
    pokemonIndex + 1
  }.png`;

  return (
    <div>
      <Head>
        <title>Who's that Pokemon?</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1>Who's that Pokemon?</h1>
        <h2 style={{ visibility: reveal ? "visible" : "hidden" }}>
          {"It's "}
          <span className="capitalize">{props.pokemonList[pokemonIndex]}</span>
          {"!"}
        </h2>

        <PokemonImage {...imgSrcSize} imgSrc={imgSrc} revealed={reveal} />

        <button className="border" onClick={() => setReveal((v) => !v)}>
          Reveal
        </button>
        <button
          className="border"
          onClick={() => {
            setReveal(false);
            setPokemonIndex(getRandomInteger(props.pokemonList.length));
          }}
        >
          Next
        </button>
      </main>
    </div>
  );
};

export default Home;

export const getStaticProps: GetStaticProps = async () => {
  const pokeApi = new PokemonClient();
  const pokemonList = await pokeApi.listPokemons(0, 151);

  return { props: { pokemonList: pokemonList.results.map((r) => r.name) } };
};

const PokemonImage = (props: {
  width: number;
  height: number;
  imgSrc: string;
  revealed: boolean;
}) => {
  const { width, height } = props;

  return (
    <div
      className="inline-flex justify-center items-center relative"
      style={{ width, height }}
    >
      <Image
        // set visibility to prevent flashing the revealed pokemon if the mask doesn't load first.
        style={{ visibility: props.revealed ? "visible" : "hidden" }}
        src={props.imgSrc}
        layout="intrinsic"
        width={width}
        height={height}
      />
      {!props.revealed && (
        <div
          // NOTE: mask-{size,image} need webkit prefixes (chrome/edge atm), so we use tailwind here instead of inline styles.
          className="absolute bg-black [mask-size:contain] [mask-image:var(--url)]"
          style={{
            ["--url" as "maskImage"]: `url(${props.imgSrc})`,
            width,
            height,
          }}
        />
      )}
    </div>
  );
};

/**
 * Get random integer.
 *
 * @param max: exclusive maximum integer.
 */
function getRandomInteger(max: number): number {
  return Math.floor(Math.random() * max);
}
